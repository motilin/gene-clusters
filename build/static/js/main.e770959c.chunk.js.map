{"version":3,"sources":["DataProvider.js","Heatmap.js","App.js","reportWebVitals.js","index.js"],"names":["DataContext","createContext","DataProvider","children","useState","status","setStatus","getMiniObj","key","a","fetch","res","json","getStream","entryPoint","stream","body","getReader","getGroupedByPatient","getPatientByIndex","getIndexByPatient","getNumberOfPatients","parseInt","getIndexByGene","getGeneByIndex","getNumberOfGenes","getMaxValue","getMatrix","getFlattened","useEffect","className","Provider","value","Heatmap","useContext","readStream","useCallback","callback","read","then","done","JSON","parse","String","fromCharCode","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e770959c.chunk.js","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\nconst DataContext = createContext();\r\nexport const useData = () => useContext(DataContext);\r\n\r\nexport default function DataProvider({ children }) {\r\n  const [status, setStatus] = useState();\r\n\r\n  const getMiniObj = async (key) => {\r\n    const res = await fetch(`/api/${key}`);\r\n    setStatus(res.status);\r\n    const json = await res.json();\r\n    return json;\r\n  };\r\n\r\n  const getStream = async (entryPoint) => {\r\n    const res = await fetch(entryPoint);\r\n    setStatus(res.status);\r\n    const stream = res.body.getReader();\r\n    return stream;\r\n  };\r\n\r\n  const getGroupedByPatient = async () => {\r\n    const json = await getMiniObj(\"groupedByPatient\");\r\n    return json;\r\n  };\r\n\r\n  const getPatientByIndex = async () => {\r\n    const json = await getMiniObj(\"patientByIndex\");\r\n    return json;\r\n  };\r\n\r\n  const getIndexByPatient = async () => {\r\n    const json = await getMiniObj(\"indexByPatient\");\r\n    return json;\r\n  };\r\n\r\n  const getNumberOfPatients = async () => {\r\n    const json = await getMiniObj(\"numberOfPatients\");\r\n    return parseInt(json);\r\n  };\r\n\r\n  const getIndexByGene = async () => {\r\n    const json = await getMiniObj(\"indexByGene\");\r\n    return json;\r\n  };\r\n\r\n  const getGeneByIndex = async () => {\r\n    const json = await getMiniObj(\"geneByIndex\");\r\n    return json;\r\n  };\r\n\r\n  const getNumberOfGenes = async () => {\r\n    const json = await getMiniObj(\"numberOfGenes\");\r\n    return parseInt(json);\r\n  };\r\n\r\n  const getMaxValue = async () => {\r\n    const json = await getMiniObj(\"maxValue\");\r\n    return parseInt(json);\r\n  };\r\n\r\n  const getMatrix = async () => {\r\n    const stream = await getStream(`/api/matrix`);\r\n    return stream;\r\n  };\r\n\r\n  const getFlattened = async () => {\r\n    const stream = await getStream(`/api/flattened`);\r\n    return stream;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getNumberOfGenes();\r\n  }, []);\r\n\r\n  if (status !== 200)\r\n    return <h2 className=\"serverError\">Server error - {status}</h2>;\r\n\r\n  return (\r\n    <DataContext.Provider\r\n      value={{\r\n        getGroupedByPatient,\r\n        getPatientByIndex,\r\n        getIndexByPatient,\r\n        getNumberOfPatients,\r\n        getIndexByGene,\r\n        getGeneByIndex,\r\n        getNumberOfGenes,\r\n        getMaxValue,\r\n        getMatrix,\r\n        getFlattened,\r\n      }}\r\n    >\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n}\r\n","import React, { useEffect, useCallback } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { useData } from \"./DataProvider\";\r\n\r\nexport default function Heatmap() {\r\n  const { getMatrix, getFlattened } = useData();\r\n\r\n  const readStream = useCallback(async (getStream, callback) => {\r\n    const stream = await getStream();\r\n    stream.read().then(({ value, done }) => {\r\n      const json = JSON.parse(String.fromCharCode(...value));\r\n      callback(json);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // readStream(getMatrix, console.log);\r\n    readStream(getFlattened, console.log);\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import \"./App.css\";\nimport React from \"react\";\nimport Heatmap from \"./Heatmap\";\n\nexport default function App() {\n  return (\n    <>\n      <Heatmap />\n    </>\n  );\n\n  // add option to filter by clusters that contain genes from a list (e.g. CS list)\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport DataProvider from \"./DataProvider\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataProvider>\n      <App />\n    </DataProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}