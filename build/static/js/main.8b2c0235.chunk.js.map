{"version":3,"sources":["DataProvider.js","Canvas.js","Heatmap.js","App.js","reportWebVitals.js","index.js"],"names":["DataContext","createContext","DataProvider","children","useState","status","setStatus","getMiniObj","key","a","fetch","res","json","getStream","entryPoint","getGroupedByPatient","getPatientByIndex","getIndexByPatient","getNumberOfPatients","parseInt","getIndexByGene","getGeneByIndex","getNumberOfGenes","getMaxValue","getMatrix","stream","getFlattened","useEffect","className","Provider","value","length","renderedLength","Canvas","serialNum","numberOfLayers","isIncluded","isBackground","useContext","refs","useRef","readStream","useCallback","getStrem","callback","then","data","drawPair","genePair","ctx","cell","i","pair","x","y","fillStyle","fillRect","numberOfGenes","setCanvas","ref","current","getContext","canvas","width","height","patient","_id","console","log","genesIncluded","Object","keys","gene","push","pairs","reverse","style","left","top","Array","prototype","func","this","j","heatmapArray","from","Heatmap","geneInfo","map","val","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b2c0235.chunk.js","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\nconst DataContext = createContext();\r\nexport const useData = () => useContext(DataContext);\r\n\r\nexport default function DataProvider({ children }) {\r\n  const [status, setStatus] = useState();\r\n\r\n  const getMiniObj = async (key) => {\r\n    const res = await fetch(`/api/${key}`);\r\n    setStatus(res.status);\r\n    const json = await res.json();\r\n    return json;\r\n  };\r\n\r\n  const getStream = async (entryPoint) => {\r\n    const res = await fetch(entryPoint);\r\n    setStatus(res.status);\r\n    return res.json()\r\n  };\r\n\r\n  const getGroupedByPatient = async () => {\r\n    const json = await getMiniObj(\"groupedByPatient\");\r\n    return json;\r\n  };\r\n\r\n  const getPatientByIndex = async () => {\r\n    const json = await getMiniObj(\"patientByIndex\");\r\n    return json;\r\n  };\r\n\r\n  const getIndexByPatient = async () => {\r\n    const json = await getMiniObj(\"indexByPatient\");\r\n    return json;\r\n  };\r\n\r\n  const getNumberOfPatients = async () => {\r\n    const json = await getMiniObj(\"numberOfPatients\");\r\n    return parseInt(json);\r\n  };\r\n\r\n  const getIndexByGene = async () => {\r\n    const json = await getMiniObj(\"indexByGene\");\r\n    return json;\r\n  };\r\n\r\n  const getGeneByIndex = async () => {\r\n    const json = await getMiniObj(\"geneByIndex\");\r\n    return json;\r\n  };\r\n\r\n  const getNumberOfGenes = async () => {\r\n    const json = await getMiniObj(\"numberOfGenes\");\r\n    return parseInt(json);\r\n  };\r\n\r\n  const getMaxValue = async () => {\r\n    const json = await getMiniObj(\"maxValue\");\r\n    return parseInt(json);\r\n  };\r\n\r\n  const getMatrix = async () => {\r\n    const stream = await getStream(`/api/matrix`);\r\n    return stream;\r\n  };\r\n\r\n  const getFlattened = async () => {\r\n    const stream = await getStream(`/api/flattened`);\r\n    return stream;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getNumberOfGenes();\r\n  }, []);\r\n\r\n  if (status !== 200)\r\n    return <h2 className=\"serverError\">Server error - {status}</h2>;\r\n\r\n  return (\r\n    <DataContext.Provider\r\n      value={{\r\n        getGroupedByPatient,\r\n        getPatientByIndex,\r\n        getIndexByPatient,\r\n        getNumberOfPatients,\r\n        getIndexByGene,\r\n        getGeneByIndex,\r\n        getNumberOfGenes,\r\n        getMaxValue,\r\n        getMatrix,\r\n        getFlattened,\r\n      }}\r\n    >\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport { useData } from \"./DataProvider\";\r\n\r\nconst length = 10500;\r\nconst renderedLength = 250;\r\nconst color = \"rgb(255, 0, 0, 0.5)\";\r\n\r\nArray.prototype.pairs = function (func) {\r\n  for (var i = 0; i < this.length; i++) {\r\n    for (var j = i; j < this.length; j++) {\r\n      func([this[i], this[j]]);\r\n    }\r\n  }\r\n};\r\n\r\nexport default function Canvas({\r\n  serialNum,\r\n  numberOfLayers,\r\n  isIncluded,\r\n  isBackground,\r\n}) {\r\n  const { getFlattened, getNumberOfGenes } = useData();\r\n  // const [loading, setLoading] = useState(false);\r\n\r\n  const refs = [useRef(null), useRef(null), useRef(null), useRef(null)];\r\n\r\n  const readStream = useCallback(async (getStrem, callback) => {\r\n    const jsonPromise = getStrem();\r\n    jsonPromise.then((data) => callback(data));\r\n  }, []);\r\n\r\n  const drawPair = useCallback((genePair, ctx, cell) => {\r\n    let pair = [...genePair];\r\n    let i;\r\n    let [x, y] = [1, 1];\r\n    if (pair[0] * cell >= length) {\r\n      x = 2;\r\n      pair[0] -= length / cell;\r\n    }\r\n    if (pair[1] * cell >= length) {\r\n      y = 3;\r\n      pair[1] -= length / cell;\r\n    }\r\n    if (x * y === 6) {\r\n      {\r\n        i = 3;\r\n      }\r\n    } else {\r\n      i = x * y - 1;\r\n    }\r\n    ctx[i].fillStyle = color;\r\n    ctx[i].fillRect(pair[0] * cell, pair[1] * cell, cell, cell);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getNumberOfGenes().then((numberOfGenes) => {\r\n      setCanvas(numberOfGenes);\r\n    });\r\n  }, []);\r\n\r\n  const setCanvas = (numberOfGenes) => {\r\n    const cell = (2 * length) / numberOfGenes;\r\n    for (const ref of refs) {\r\n      if (!ref.current || !ref.current.getContext) return null;\r\n    }\r\n    let ctx = [];\r\n    for (let i = 0; i < refs.length; i++) {\r\n      ctx[i] = refs[i].current.getContext(\"2d\");\r\n      ctx[i].canvas.width = length;\r\n      ctx[i].canvas.height = length;\r\n      if (isBackground) {\r\n        ctx[i].fillStyle = \"black\";\r\n        ctx[i].fillRect(0, 0, length, length);\r\n      }\r\n    }\r\n    if (!isBackground) {\r\n      readStream(getFlattened, (json) => {\r\n        for (let patient of json) {\r\n          if (patient._id % numberOfLayers === serialNum) {\r\n            console.log(\"patient id\", patient._id);\r\n            let genesIncluded = [];\r\n            for (let gene of Object.keys(patient.value)) {\r\n              if (isIncluded(patient.value[gene])) {\r\n                genesIncluded.push(gene);\r\n              }\r\n            }\r\n            genesIncluded.pairs((pair) => {\r\n              pair = [parseInt(pair[0]), parseInt(pair[1])];\r\n              drawPair(pair, ctx, cell);\r\n              if (pair[0] !== pair[1]) {\r\n                drawPair(pair.reverse(), ctx, cell);\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"quadruple\">\r\n      <canvas ref={refs[0]} style={{ left: `0px`, top: `0px` }} />\r\n      <canvas\r\n        ref={refs[1]}\r\n        style={{ left: `${renderedLength}px`, top: `0px` }}\r\n      />\r\n      <canvas\r\n        ref={refs[2]}\r\n        style={{ left: `0px`, top: `${renderedLength}px` }}\r\n      />\r\n      <canvas\r\n        ref={refs[3]}\r\n        style={{\r\n          left: `${renderedLength}px`,\r\n          top: `${renderedLength}px`,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","// import { curveBumpX } from \"d3-shape\";\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport Canvas from \"./Canvas\";\r\n\r\nconst numberOfLayers = 50;\r\nconst heatmapArray = Array.from(Array(10).keys())\r\n\r\n// const getRndColor = () => {\r\n//   var r = (255 * Math.random()) | 0,\r\n//     g = (255 * Math.random()) | 0,\r\n//     b = (255 * Math.random()) | 0;\r\n//   return \"rgb(\" + r + \",\" + g + \",\" + b + \", 1)\";\r\n// };\r\n\r\n// const requestAnimFrame = (() => {\r\n//   return (\r\n//     window.requestAnimationFrame ||\r\n//     function (callback) {\r\n//       window.setTimeout(callback, 1000 / 60);\r\n//     }\r\n//   );\r\n// })();\r\n\r\nexport default function Heatmap() {\r\n  const isIncluded = useCallback((geneInfo) => {\r\n    return true;\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"heatmap\">\r\n      <Canvas\r\n        numberOfLayers={numberOfLayers}\r\n        serialNum={0}\r\n        isIncluded={isIncluded}\r\n        isBackground={true}\r\n      />\r\n      {heatmapArray.map((val, i) => (\r\n        <Canvas\r\n          key={i}\r\n          numberOfLayers={numberOfLayers}\r\n          serialNum={i}\r\n          isIncluded={isIncluded}\r\n          isBackground={false}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React from \"react\";\nimport Heatmap from \"./Heatmap\";\n\nexport default function App() {\n  return (\n    <>\n      <Heatmap />\n    </>\n  );\n\n  // add option to filter by clusters that contain genes from a list (e.g. CS list)\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport DataProvider from \"./DataProvider\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataProvider>\n      <App />\n    </DataProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}